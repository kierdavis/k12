// generated by stringer -output=types_string.go -type=Color,CapStyle,DashStyle,FillType,AttrVisibility,TextAlignment,PinType,PinPoint; DO NOT EDIT

package gosch

import "fmt"

const _Color_name = "BackgroundColorPinColorNetEndpointColorGraphicColorNetColorAttributeColorLogicBubbleColorDotsGridColorDetachedAttributeColorTextColorBusColorSelectColorBoundingBoxColorZoomBoxColorStrokeColorLockColorOutputBackgroundColorFreestyle1ColorFreestyle2ColorFreestyle3ColorFreestyle4ColorJunctionColorMeshGridMajorColorMeshGridMinorColor"

var _Color_index = [...]uint16{0, 15, 23, 39, 51, 59, 73, 89, 102, 124, 133, 141, 152, 168, 180, 191, 200, 221, 236, 251, 266, 281, 294, 312, 330}

func (i Color) String() string {
	if i+1 >= Color(len(_Color_index)) {
		return fmt.Sprintf("Color(%d)", i)
	}
	return _Color_name[_Color_index[i]:_Color_index[i+1]]
}

const _CapStyle_name = "NoCapSquareCapRoundCap"

var _CapStyle_index = [...]uint8{0, 5, 14, 22}

func (i CapStyle) String() string {
	if i+1 >= CapStyle(len(_CapStyle_index)) {
		return fmt.Sprintf("CapStyle(%d)", i)
	}
	return _CapStyle_name[_CapStyle_index[i]:_CapStyle_index[i+1]]
}

const _DashStyle_name = "SolidDottedDashedCenterPhantom"

var _DashStyle_index = [...]uint8{0, 5, 11, 17, 23, 30}

func (i DashStyle) String() string {
	if i+1 >= DashStyle(len(_DashStyle_index)) {
		return fmt.Sprintf("DashStyle(%d)", i)
	}
	return _DashStyle_name[_DashStyle_index[i]:_DashStyle_index[i+1]]
}

const _FillType_name = "HollowFillMeshHatchVoid"

var _FillType_index = [...]uint8{0, 6, 10, 14, 19, 23}

func (i FillType) String() string {
	if i+1 >= FillType(len(_FillType_index)) {
		return fmt.Sprintf("FillType(%d)", i)
	}
	return _FillType_name[_FillType_index[i]:_FillType_index[i+1]]
}

const _AttrVisibility_name = "NameAndValueValueOnlyNameOnly"

var _AttrVisibility_index = [...]uint8{0, 12, 21, 29}

func (i AttrVisibility) String() string {
	if i+1 >= AttrVisibility(len(_AttrVisibility_index)) {
		return fmt.Sprintf("AttrVisibility(%d)", i)
	}
	return _AttrVisibility_name[_AttrVisibility_index[i]:_AttrVisibility_index[i+1]]
}

const _TextAlignment_name = "BottomLeftMiddleLeftTopLeftBottomCenterMiddleCenterTopCenterBottomRightMiddleRightTopRight"

var _TextAlignment_index = [...]uint8{0, 10, 20, 27, 39, 51, 60, 71, 82, 90}

func (i TextAlignment) String() string {
	if i+1 >= TextAlignment(len(_TextAlignment_index)) {
		return fmt.Sprintf("TextAlignment(%d)", i)
	}
	return _TextAlignment_name[_TextAlignment_index[i]:_TextAlignment_index[i+1]]
}

const _PinType_name = "NormalPinBusPin"

var _PinType_index = [...]uint8{0, 9, 15}

func (i PinType) String() string {
	if i+1 >= PinType(len(_PinType_index)) {
		return fmt.Sprintf("PinType(%d)", i)
	}
	return _PinType_name[_PinType_index[i]:_PinType_index[i+1]]
}

const _PinPoint_name = "Point1Point2"

var _PinPoint_index = [...]uint8{0, 6, 12}

func (i PinPoint) String() string {
	if i+1 >= PinPoint(len(_PinPoint_index)) {
		return fmt.Sprintf("PinPoint(%d)", i)
	}
	return _PinPoint_name[_PinPoint_index[i]:_PinPoint_index[i+1]]
}
